@{
    ViewData["Title"] = "Upload";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline PDF Upload</title>
    <style>
        /* Your existing styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 300px;
        }

        .container img {
            width: 80px;
        }

        h2 {
            font-size: 18px;
            color: #333;
            margin-bottom: 20px;
        }

        p{
            font-size: 10px;
            color: #333;
        }

        input[type="file"] {
            display: none;
        }

        label {
            display: inline-flex;
            align-items: center;
            border: 1px solid #ddd;
            padding: 10px 20px;
            border-radius: 5px;
            background-color: #f9f9f9;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .divider {
            width: 1px;
            height: 20px;
            background-color: #ddd;
            margin: 0 10px;
        }

        #fileName {
            color: #777;
            font-size: 14px;
        }

        button {
            width: 80%;
            padding: 10px;
            background-color: #333;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .error-message {
            color: red;
            font-size: 14px;
            display: none;
            margin-top: 10px;
        }

        /* Modal styles */
        .error-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            
             align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            width: 300px;
            text-align: center;
             align-items: center;
        }

        .close-btn {
            cursor: pointer;
            color: #fff;
            background-color: #f44336;
            padding: 10px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
        }

        .close-btn:hover {
            background-color: #d32f2f;
        }

        
        .success-btn {
         background-color: #4CAF50; 
         color: white; 
         border: none;
        padding: 10px 20px;
        text-align: center;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px; 
           }

        
        .success-btn:hover {
        background-color: #45a049; 
        }

    </style>
</head>
<body>

    <img src="@Url.Content("~/images/upload.png")" alt="Upload Icon" class="upload-icon">
    <h2>Upload your PDF file</h2>
   

    <form action="/api/upload/uploadfile" method="post" enctype="multipart/form-data" id="uploadForm">
        <input type="hidden" name="sessionId" value="@ViewBag.SessionId" />
        <span id="sessionIdDisplay"></span>
        <label for="fileInput">
            <span>Choose file</span>
            <div class="divider"></div> <!-- Divider line -->
            <span id="fileName">No file selected</span>
        </label>
        <input type="file" name="file" id="fileInput" accept=".pdf" />
        
        <button type="submit">Upload</button>
        <div class="error-message" id="errorMessage">Please upload a PDF file.</div>
    </form>

    <!-- Modal for error or success messages -->
    <div id="errorModal" class="error-modal">
        <div class="modal-content">
            <p id="modalMessage">
                @if (TempData["SuccessMessage"] != null)
                {
                    @: @TempData["SuccessMessage"]
                }
                else
                {
                    @: @TempData["ErrorMessage"]
                }
            </p>
            <button class="close-btn" id="closeModalBtn">Close</button>
        </div>
    </div>

    <script src="~/lib/signalr.min.js"></script>
<script>


    // Function to get the sessionId from the URL query parameters
    function getSessionIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('sessionId'); // This retrieves the value of 'sessionId'
    }

   window.onload = function () {
    // Show success message from TempData (if any)
    const successMessage = "@TempData["SuccessMessage"]";
    
    if (successMessage && successMessage !== "") {
        showSuccessModal(successMessage);
        // Clear the file input after successful upload
        document.getElementById('fileInput').value = ""; // Clear file selection
        document.getElementById('fileName').textContent = "No file selected"; // Reset label
    } else {
        // Proceed to check session ID only if no success message is present
        const sessionId = getSessionIdFromURL();

        if (sessionId) {
            document.getElementById('sessionId').value = sessionId; // Set the hidden input's value
            document.getElementById('sessionIdDisplay').textContent = "Session ID: " + sessionId;
        } else {
            // Show an error message if session ID is missing
            showErrorModal("A valid session ID is required to upload a file.");
        }
    
    }
    
    }

    const fileInput = document.getElementById('fileInput');
    const fileName = document.getElementById('fileName');
    const errorMessage = document.getElementById('errorMessage');
    const uploadForm = document.getElementById('uploadForm');
    const modalMessage = document.getElementById('modalMessage');
    const errorModal = document.getElementById('errorModal');

    fileInput.addEventListener('change', function () {
    fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file selected";
    });

    uploadForm.addEventListener('submit', function (event) {
    const file = fileInput.files[0];
    const sessionId = getSessionIdFromURL();

    errorMessage.style.display = 'none'; // Clear previous error

    if (!sessionId) {
        event.preventDefault();
        showErrorModal("A valid session ID is required.");
    } else if (!file) {
        event.preventDefault();
        errorMessage.textContent = "No file selected.";
        errorMessage.style.display = 'block';
    } else if (!file.name.toLowerCase().endsWith('.pdf')) {  // Extension check
        event.preventDefault();
        errorMessage.textContent = "Please upload a valid PDF file.";
        errorMessage.style.display = 'block';
    } else if (file.type && file.type !== "application/pdf") {  // Optional MIME type check
        event.preventDefault();
        errorMessage.textContent = "Please upload a file with a valid PDF format.";
        errorMessage.style.display = 'block';
    }
        });



    // Function to display the modal with a custom error message
    function showErrorModal(message) {
        modalMessage.textContent = message;
        errorModal.style.display = 'flex';
    }

    function showSuccessModal(message) {
             modalMessage.textContent = message;
         errorModal.style.display = 'flex';

        // Apply the green style to the close button
        const closeModalBtn = document.getElementById('closeModalBtn');
        closeModalBtn.classList.add('success-btn');  // Add the green style class
    }

    // Close the modal and reset the button style
    document.getElementById('closeModalBtn').onclick = function () {
        errorModal.style.display = 'none';
        this.classList.remove('success-btn');  // Reset button style when closing
    }

     // If you want to invoke methods on the hub:
     function sendFileDetails(sessionId, filePath) {
      connection.invoke("SendFileDetails", sessionId, filePath)
       .catch(function (err) {
        return console.error(err.toString());
        });
        
     }

        // Connect to SignalR Hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/Hubs/fileUploadHub") // URL where SignalR hub is mapped
            .configureLogging(signalR.LogLevel.Information)  // Set logging level if you need
            .build();

        connection.on("ReceiveMessage", function (message) {
            console.log("Received message:", message);
            // Add any custom behavior here, such as UI updates or invoking an API call
        });

        // Start the connection
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });


</script>




</body>
</html>